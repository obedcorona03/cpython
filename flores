import pygame
import random
import sys

# Inicializar pygame
pygame.init()

# ConfiguraciÃ³n de la pantalla
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Ramo de Flores Animado")

# Colores
WHITE = (255, 255, 255)
ORANGE = (255, 165, 0)
YELLOW = (255, 255, 0)

# Clase para representar una flor
class Flower(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((20, 20))
        self.image.fill(WHITE)
        pygame.draw.circle(self.image, ORANGE, (10, 10), 10)
        for angle in range(0, 360, 60):
            x = int(10 + 7 * 0.5 * (1 + angle % 2) * pygame.math.Vector2(1, 0).rotate(angle)[0])
            y = int(10 + 7 * 0.5 * (1 + angle % 2) * pygame.math.Vector2(1, 0).rotate(angle)[1])
            pygame.draw.circle(self.image, YELLOW, (x, y), 5)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - self.rect.width)
        self.rect.y = random.randint(0, screen_height - self.rect.height)
        self.speed = random.randint(1, 3)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > screen_height:
            self.rect.bottom = 0

# Crear grupo de sprites de flores
flowers = pygame.sprite.Group()
for _ in range(5):
    flower = Flower()
    flowers.add(flower)

# Bucle principal del juego
clock = pygame.time.Clock()
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Actualizar y dibujar flores
    flowers.update()
    screen.fill(WHITE)
    flowers.draw(screen)
    pygame.display.flip()
    clock.tick(60)
